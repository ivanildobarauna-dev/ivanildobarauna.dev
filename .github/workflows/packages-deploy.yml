name: Site Deployment

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tests/**'
      - '.github/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'docker-compose.local.yaml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend

      - name: Build and push Frontend image
        id: push-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend

      - name: Build and push Backend image
        id: push-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: Generate artifact attestation for Frontend
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          subject-digest: ${{ steps.push-frontend.outputs.digest }}
          push-to-registry: true

      - name: Generate artifact attestation for Backend
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          subject-digest: ${{ steps.push-backend.outputs.digest }}
          push-to-registry: true

      # --- VPS DEPLOY ---
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create app directory on VPS
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} "mkdir -p /home/ubuntu/app/site"

      - name: Create temporary .env file
        run: |
          echo "DD_API_KEY=${{ secrets.DATADOG_API_KEY }}" > .env

      - name: Create production docker-compose
        run: |
          cat > docker-compose.prod.yaml << 'EOF'
          services:
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:main
              container_name: portfolio-frontend
              ports:
                - "8080:8080"
              environment:
                - DD_SERVICE=frontend-ivanildobarauna-dev
                - DD_ENV=production
                - DD_VERSION=1.0.0
                - DD_TRACE_SAMPLE_RATE=1.0
                - DD_AGENT_HOST=172.17.0.1
                - DD_PROCESS_AGENT_ENABLED=true
                - DD_TAGS="app:portfolio,tech:nextjs,role:frontend"
              labels:
                com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "frontend-ivanildobarauna-dev"}]'
                tags.env: "production"
                tags.service: "frontend-ivanildobarauna-dev"
                tags.tech: "nextjs"
                tags.app: "portfolio"
                tags.role: "frontend"
              depends_on:
                - backend
              restart: unless-stopped
              networks:
                - app_network


            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:main
              container_name: portfolio-backend
              ports:
                - "8090:8090"
              environment:
                - DD_SERVICE=api-ivanildobarauna-dev
                - DD_ENV=production
                - DD_VERSION=1.0.0
                - DD_TRACE_SAMPLE_RATE=1.0
                - DD_AGENT_HOST=172.17.0.1
                - DD_PROCESS_AGENT_ENABLED=true
                - DD_TAGS="app:portfolio,tech:python,role:backend"
              labels:
                com.datadoghq.ad.logs: '[{"source": "python", "service": "api-ivanildobarauna-dev"}]'
                tags.env: "production"
                tags.service: "api-ivanildobarauna-dev"
                tags.tech: "python"
                tags.app: "portfolio"
                tags.role: "backend"
              restart: unless-stopped
              networks:
                - app_network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8090/api/v1/ping"]
                interval: 300s
                timeout: 10s
                retries: 3
                start_period: 40s
          
          networks:
            app_network:
              external: true
              
          EOF

      - name: Sync docker-compose and env to VPS
        run: |
          rsync -avz --delete \
            docker-compose.prod.yaml .env \
            ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }}:/home/ubuntu/app/site/

      - name: Deploy on VPS
        run: |
          ssh ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} << 'EOF'
            cd /home/ubuntu/app/site
            rm -f .env
            echo "DD_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> .env
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d --remove-orphans
            docker system prune -f
          EOF

    environment:
      name: Production
      url: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
